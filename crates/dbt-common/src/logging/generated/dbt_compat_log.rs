// This file is @generated by prost-build.
/// Main log entry structure
/// the order here is because completion
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogEntry {
    #[prost(message, optional, tag = "10")]
    pub info: ::core::option::Option<LogInfo>,
    #[prost(oneof = "log_entry::Data", tags = "1, 2, 3, 4")]
    pub data: ::core::option::Option<log_entry::Data>,
}
/// Nested message and enum types in `LogEntry`.
pub mod log_entry {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(untagged)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(message, tag = "1")]
        Completion(super::CompletionLogData),
        #[prost(message, tag = "2")]
        CompiledNode(super::CompiledNodeLogData),
        #[prost(message, tag = "3")]
        Show(super::ShowLogData),
        #[prost(message, tag = "4")]
        ExecutionData(super::ExecutingLogData),
    }
}
/// Completion log data (for command completion)
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompletionLogData {
    #[prost(uint32, tag = "1")]
    pub log_version: u32,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub completed_at: ::prost::alloc::string::String,
    #[prost(double, tag = "4")]
    pub elapsed: f64,
    #[prost(bool, tag = "5")]
    pub success: bool,
}
/// Compiled node log data (for dbt compile events)
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CompiledNodeLogData {
    #[prost(uint32, tag = "1")]
    pub log_version: u32,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub compiled: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub unique_id: ::prost::alloc::string::String,
}
/// Node executing log data (for general dbt events, including node start and completion)
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutingLogData {
    #[prost(uint32, tag = "1")]
    pub log_version: u32,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub node_info: ::core::option::Option<NodeInfo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShowLogData {
    #[prost(uint32, tag = "1")]
    pub log_version: u32,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub preview: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub unique_id: ::prost::alloc::string::String,
}
/// Log info structure
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogInfo {
    #[prost(string, tag = "1")]
    pub category: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub extra: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(string, tag = "4")]
    pub invocation_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub level: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub pid: u64,
    #[prost(string, tag = "9")]
    pub thread: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub ts: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "11")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub elapsed: ::core::option::Option<::prost::alloc::string::String>,
}
/// Node info structure
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    #[prost(string, tag = "1")]
    pub unique_id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub node_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub node_started_at: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub node_finished_at: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub node_status: ::core::option::Option<::prost::alloc::string::String>,
}

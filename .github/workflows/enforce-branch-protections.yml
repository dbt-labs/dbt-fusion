# **what?**
# Since we don't merge most PRs in this repo, we need 
# a visible way to enforce branch protections to ensure
# changes can be properly merged and deployed.

# **why?**
# For security hardening.

# **when?**
# This will run for all PRs targetting main.


name: Enforce Branch Protections

on:
  pull_request_target:
    types: [opened, reopened, labeled, unlabeled, synchronize]
    branches: [main]

permissions:
  contents: read
  pull-requests: write

env:
  SIGNED_COMMITS_COMMENT: >
    This repository enforces signed commits. Please sign your commits by adding the `-s` flag to your commit message.

jobs:
  enforce_signed_commits:
    runs-on: ubuntu-latest
    steps:
      # For pull_request_target, checkout the base repo first
      - name: "Checkout base repo"
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          # We only need enough history to get to the PR's base commit
          fetch-depth: 1
          persist-credentials: false  # don't persist credentials for security

      # Fetch (but don't checkout) the PR commits since this may be a fork with untrusted code
      - name: "Fetch PR commits"
        run: |
          git remote add fork ${{ github.event.pull_request.head.repo.clone_url }}
          git fetch fork ${{ github.event.pull_request.head.sha }}

      - name: "Check for signed commits"
        id: signed-commits
        shell: bash
        env:
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          # Check all commits in the PR using the fork remote
          PR_RANGE="${{ github.event.pull_request.base.sha }}..fork/$PR_HEAD_REF"
          echo "Checking commits in range: $PR_RANGE"

          if ! git log "$PR_RANGE" --show-signature | grep -q "^[^[:space:]].*Signature made.*Good signature"; then
            echo "signed-commits=false" >> $GITHUB_OUTPUT
            echo "Found unsigned commits:"
            git log "$PR_RANGE" --show-signature
          else
            echo "signed-commits=true" >> $GITHUB_OUTPUT
            echo "All commits are signed"
          fi

      - name: "Check for comment"
        if: steps.signed-commits.outputs.signed-commits == 'false'
        id: signed_comment
        uses: peter-evans/find-comment@3eae4d37986fb5a8592848f6a574fdf654e61f9e
        with:
            issue-number: ${{ github.event.pull_request.number }}
            comment-author: "github-actions[bot]"
            body-includes: ${{ env.SIGNED_COMMITS_COMMENT }}

      - name: "Set if comment already exists"
        if: steps.signed-commits.outputs.signed-commits == 'false'
        shell: bash
        id: comment_check
        run: |
            if [ '${{ steps.signed_comment.outputs.comment-body }}' = '' ]; then
                echo "exists=false" >> $GITHUB_OUTPUT
                echo "Comment does not exist for this PR"
            else
                echo "exists=true" >> $GITHUB_OUTPUT
                echo "Comment already exists for this PR"
            fi

      - name: "Create PR comment if signed commits are missing"
        if: |
            steps.signed-commits.outputs.signed-commits == 'false' &&
            steps.comment_check.outputs.exists == 'false'
        run: |
            gh issue comment ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "${{ env.SIGNED_COMMITS_COMMENT }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Fail job if signed commits are missing"
        if: steps.signed-commits.outputs.signed-commits == 'false'
        uses: actions/github-script@v7
        with:
            script: core.setFailed('Signed commits are required to merge.')
